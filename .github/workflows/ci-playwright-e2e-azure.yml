name: Playwright E2E Tests - Azure Environment

# Disabled automatic triggers: E2E tests only run via manual dispatch
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: false
        default: 'azure-test'
        type: choice
        options:
          - azure-test
          - local

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_REGION: 'Sweden Central'
  RESOURCE_GROUP_PREFIX: 'rg-tdoc-tags-test'

jobs:
  setup-test-environment:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'azure-test')
    outputs:
      resource-group-name: ${{ steps.terraform-output.outputs.resource_group_name }}
      app-service-url: ${{ steps.terraform-output.outputs.app_service_url }}
      app-service-name: ${{ steps.terraform-output.outputs.app_service_name }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Generate unique suffix
      id: unique-suffix
      run: |
        SUFFIX=$(echo "${{ github.run_id }}" | tail -c 9)
        echo "suffix=${SUFFIX}" >> $GITHUB_OUTPUT
        echo "Using suffix: ${SUFFIX}"
        
    - name: Terraform Init
      working-directory: ./infrastructure/azure/test-environment
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
    - name: Terraform Plan
      working-directory: ./infrastructure/azure/test-environment
      run: |
        terraform plan \
          -var="sql_admin_username=${{ secrets.SQL_ADMIN_USERNAME }}" \
          -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD }}" \
          -out=tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
    - name: Terraform Apply
      working-directory: ./infrastructure/azure/test-environment
      run: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
    - name: Get Terraform Outputs
      id: terraform-output
      working-directory: ./infrastructure/azure/test-environment
      run: |
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "app_service_url=$(terraform output -raw app_service_url)" >> $GITHUB_OUTPUT
        echo "app_service_name=$(terraform output -raw app_service_name)" >> $GITHUB_OUTPUT
        echo "sql_server_name=$(terraform output -raw sql_server_name)" >> $GITHUB_OUTPUT
        echo "sql_database_name=$(terraform output -raw sql_database_name)" >> $GITHUB_OUTPUT

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: setup-test-environment
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'azure-test')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build application
      run: dotnet build --no-restore --configuration Release
      
    - name: Run unit tests with coverage
      run: |
        dotnet test tests/TagManagement.UnitTests/TagManagement.UnitTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results \
          --logger trx \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:Threshold=40 \
          /p:ThresholdType=line \
          /p:ThresholdStat=total
          
    - name: Publish application
      run: |
        dotnet publish src/TagManagement.Api/TagManagement.Api.csproj \
          --configuration Release \
          --no-build \
          --output ./publish
          
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ needs.setup-test-environment.outputs.app-service-name }}
        package: './publish'
        
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
    - name: Health check
      run: |
        MAX_ATTEMPTS=10
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
          
          if curl -f -s "${{ needs.setup-test-environment.outputs.app-service-url }}/health" > /dev/null; then
            echo "✅ Application is healthy!"
            break
          else
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ Application failed health check after $MAX_ATTEMPTS attempts"
              exit 1
            fi
            echo "⏳ Waiting 30 seconds before retry..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          fi
        done

  run-playwright-tests:
    runs-on: ubuntu-latest
    needs: [setup-test-environment, build-and-deploy]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'azure-test')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore test project dependencies
      run: dotnet restore tests/TagManagement.PlaywrightTests/TagManagement.PlaywrightTests.csproj
      
    - name: Install Playwright
      run: |
        dotnet build tests/TagManagement.PlaywrightTests/TagManagement.PlaywrightTests.csproj
        pwsh tests/TagManagement.PlaywrightTests/bin/Debug/net8.0/playwright.ps1 install --with-deps
        
    - name: Update test configuration
      run: |
        # Update appsettings.json with Azure test URL
        cd tests/TagManagement.PlaywrightTests
        cat > appsettings.json << EOF
        {
          "TestSettings": {
            "BaseUrl": "https://localhost:7001",
            "AzureTestUrl": "${{ needs.setup-test-environment.outputs.app-service-url }}",
            "Timeout": 60000,
            "BrowserType": "chromium",
            "Headless": true,
            "SlowMo": 0,
            "VideoRecording": true,
            "Screenshots": true
          },
          "TestData": {
            "ValidTestUser": {
              "Username": "testuser@example.com",
              "Password": "TestPassword123!"
            },
            "TestTags": {
              "DefaultTagType": "Equipment",
              "TestUnitName": "Test Unit 001",
              "TestLocationName": "Test Location A"
            }
          }
        }
        EOF
        
    - name: Run Playwright E2E tests
      run: |
        dotnet test tests/TagManagement.PlaywrightTests/TagManagement.PlaywrightTests.csproj \
          --configuration Debug \
          --logger trx \
          --results-directory ./playwright-results \
          --verbosity normal
      env:
        AZURE_TEST_URL: ${{ needs.setup-test-environment.outputs.app-service-url }}
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: tests/TagManagement.PlaywrightTests/playwright-report/
        retention-days: 30
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-test-results
        path: |
          ./playwright-results/
          tests/TagManagement.PlaywrightTests/test-results/
        retention-days: 30

  cleanup-test-environment:
    runs-on: ubuntu-latest
    needs: [setup-test-environment, run-playwright-tests]
    if: always() && (github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'azure-test'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Terraform Init
      working-directory: ./infrastructure/azure/test-environment
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
    - name: Terraform Destroy
      working-directory: ./infrastructure/azure/test-environment
      run: |
        terraform destroy -auto-approve \
          -var="sql_admin_username=${{ secrets.SQL_ADMIN_USERNAME }}" \
          -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  comment-pr-results:
    runs-on: ubuntu-latest
    needs: [run-playwright-tests]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: playwright-test-results
        path: ./test-results
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## 🎭 Playwright E2E Test Results\n\n';
          
          if ('${{ needs.run-playwright-tests.result }}' === 'success') {
            comment += '✅ **All E2E tests passed!**\n\n';
            comment += '- Tests ran against Azure test environment\n';
            comment += '- All API endpoints validated\n';
            comment += '- Medical device compliance checks completed\n\n';
          } else {
            comment += '❌ **Some E2E tests failed**\n\n';
            comment += '- Check the workflow logs for details\n';
            comment += '- Test artifacts are available for download\n\n';
          }
          
          comment += `**Test Environment:** ${{ needs.setup-test-environment.outputs.app-service-url }}\n`;
          comment += `**Workflow:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
          comment += '📊 [Download Test Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) | ';
          comment += '🎥 [View Screenshots & Videos](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
