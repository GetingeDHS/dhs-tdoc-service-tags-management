// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TagManagement.Infrastructure.Persistence;

#nullable disable

namespace TagManagement.Infrastructure.Migrations
{
    [DbContext(typeof(TagManagementDbContext))]
    partial class TagManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.CustomerModel", b =>
                {
                    b.Property<int>("CustomerKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMERKEY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerKeyId"));

                    b.Property<int?>("CreatedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CREATEDUSERKEY");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEDTIME");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CUSTOMERCODE");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CUSTOMERNAME");

                    b.Property<string>("CustomerNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CUSTOMERNUMBER");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("ISACTIVE");

                    b.Property<int?>("ModifiedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("MODIFIEDUSERKEY");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIEDTIME");

                    b.HasKey("CustomerKeyId");

                    b.ToTable("TCUSTOMER");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.IndicatorModel", b =>
                {
                    b.Property<int>("IndicatorKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("INDICATORKEY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndicatorKeyId"));

                    b.Property<int?>("CreatedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CREATEDUSERKEY");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEDTIME");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IndicatorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("INDICATORNAME");

                    b.Property<string>("IndicatorNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("INDICATORNUMBER");

                    b.Property<int?>("IndicatorType")
                        .HasColumnType("int")
                        .HasColumnName("INDICATORTYPE");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("ISACTIVE");

                    b.Property<int?>("ModifiedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("MODIFIEDUSERKEY");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIEDTIME");

                    b.HasKey("IndicatorKeyId");

                    b.ToTable("TINDICATOR");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.ItemModel", b =>
                {
                    b.Property<int>("ItemKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ITEMKEY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemKeyId"));

                    b.Property<int?>("CreatedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CREATEDUSERKEY");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEDTIME");

                    b.Property<int?>("CustomerKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMERKEY");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("ISACTIVE");

                    b.Property<string>("ItemName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ITEMNAME");

                    b.Property<string>("ItemNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ITEMNUMBER");

                    b.Property<int?>("ItemType")
                        .HasColumnType("int")
                        .HasColumnName("ITEMTYPE");

                    b.Property<int?>("ModifiedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("MODIFIEDUSERKEY");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIEDTIME");

                    b.HasKey("ItemKeyId");

                    b.HasIndex("CustomerKeyId")
                        .HasDatabaseName("IX_Items_Customer");

                    b.ToTable("TITEM");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.LocationModel", b =>
                {
                    b.Property<int>("LocationKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LOCATIONKEY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationKeyId"));

                    b.Property<int?>("CreatedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CREATEDUSERKEY");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEDTIME");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("ISACTIVE");

                    b.Property<string>("LocationCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LOCATIONCODE");

                    b.Property<string>("LocationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LOCATIONNAME");

                    b.Property<int?>("ModifiedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("MODIFIEDUSERKEY");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIEDTIME");

                    b.Property<int?>("ParentLocationKeyId")
                        .HasColumnType("int")
                        .HasColumnName("PARENTLOCATIONKEY");

                    b.HasKey("LocationKeyId");

                    b.HasIndex("ParentLocationKeyId");

                    b.ToTable("TLOCATION");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.TagContentModel", b =>
                {
                    b.Property<int>("TagContentKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TAGCONTENTKEY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagContentKeyId"));

                    b.Property<int?>("ChildTagKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CHILDTAGKEY");

                    b.Property<int?>("CreatedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CREATEDUSERKEY");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEDTIME");

                    b.Property<int?>("IndicatorKeyId")
                        .HasColumnType("int")
                        .HasColumnName("INDICATORKEY");

                    b.Property<int?>("ItemKeyId")
                        .HasColumnType("int")
                        .HasColumnName("ITEMKEY");

                    b.Property<int?>("LocationKeyId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATIONKEY");

                    b.Property<int?>("LotInfoKeyId")
                        .HasColumnType("int")
                        .HasColumnName("LOTINFOKEY");

                    b.Property<int?>("ModifiedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("MODIFIEDUSERKEY");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIEDTIME");

                    b.Property<int>("ParentTagKeyId")
                        .HasColumnType("int")
                        .HasColumnName("PARENTTAGKEY");

                    b.Property<int?>("SerialKeyId")
                        .HasColumnType("int")
                        .HasColumnName("SERIALKEY");

                    b.Property<int?>("UnitKeyId")
                        .HasColumnType("int")
                        .HasColumnName("UNITKEY");

                    b.HasKey("TagContentKeyId");

                    b.HasIndex("ChildTagKeyId");

                    b.HasIndex("IndicatorKeyId");

                    b.HasIndex("ItemKeyId");

                    b.HasIndex("LocationKeyId")
                        .HasDatabaseName("IX_TagContent_Location");

                    b.HasIndex("ParentTagKeyId")
                        .HasDatabaseName("IX_TagContent_ParentTag");

                    b.HasIndex("UnitKeyId");

                    b.ToTable("TTAGCONTENT");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.TagTypeModel", b =>
                {
                    b.Property<int>("TagTypeKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TAGTYPEKEY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagTypeKeyId"));

                    b.Property<int?>("CreatedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CREATEDUSERKEY");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEDTIME");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("ISACTIVE");

                    b.Property<int?>("ModifiedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("MODIFIEDUSERKEY");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIEDTIME");

                    b.Property<string>("TagTypeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("TAGTYPECODE");

                    b.Property<string>("TagTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TAGTYPENAME");

                    b.HasKey("TagTypeKeyId");

                    b.ToTable("TTAGTYPE");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.TagsModel", b =>
                {
                    b.Property<int>("TagKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TAGKEY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagKeyId"));

                    b.Property<int?>("CreatedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CREATEDUSERKEY");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEDTIME");

                    b.Property<bool?>("IsAutoTag")
                        .HasColumnType("bit")
                        .HasColumnName("ISAUTOTAG");

                    b.Property<int?>("LocationKeyId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATIONKEY");

                    b.Property<int?>("ModifiedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("MODIFIEDUSERKEY");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIEDTIME");

                    b.Property<int?>("ProcessBatchKeyId")
                        .HasColumnType("int")
                        .HasColumnName("PROCESSBATCHKEY");

                    b.Property<int?>("TagNumber")
                        .HasColumnType("int")
                        .HasColumnName("TAGNUMBER");

                    b.Property<int?>("TagTypeKeyId")
                        .HasColumnType("int")
                        .HasColumnName("TAGTYPEKEY");

                    b.HasKey("TagKeyId");

                    b.HasIndex("IsAutoTag")
                        .HasDatabaseName("IX_Tags_IsAutoTag");

                    b.HasIndex("LocationKeyId")
                        .HasDatabaseName("IX_Tags_Location");

                    b.HasIndex("ProcessBatchKeyId")
                        .HasDatabaseName("IX_Tags_ProcessBatch");

                    b.HasIndex("TagTypeKeyId");

                    b.HasIndex("TagNumber", "TagTypeKeyId")
                        .HasDatabaseName("IX_Tags_TagNumber_TagType");

                    b.ToTable("TTAGS");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.UnitModel", b =>
                {
                    b.Property<int>("UnitKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UNITKEY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitKeyId"));

                    b.Property<int?>("CreatedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CREATEDUSERKEY");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATEDTIME");

                    b.Property<int?>("CustomerKeyId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMERKEY");

                    b.Property<int?>("ItemKeyId")
                        .HasColumnType("int")
                        .HasColumnName("ITEMKEY");

                    b.Property<int?>("LocationKeyId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATIONKEY");

                    b.Property<int?>("ModifiedByUserKeyId")
                        .HasColumnType("int")
                        .HasColumnName("MODIFIEDUSERKEY");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIEDTIME");

                    b.Property<int?>("ProcessBatchKeyId")
                        .HasColumnType("int")
                        .HasColumnName("PROCESSBATCHKEY");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SERIALNUMBER");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<int?>("UnitNumber")
                        .HasColumnType("int")
                        .HasColumnName("UNITNUMBER");

                    b.HasKey("UnitKeyId");

                    b.HasIndex("CustomerKeyId");

                    b.HasIndex("ItemKeyId");

                    b.HasIndex("LocationKeyId")
                        .HasDatabaseName("IX_Units_Location");

                    b.ToTable("TUNIT");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.ItemModel", b =>
                {
                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.CustomerModel", "Customer")
                        .WithMany("Items")
                        .HasForeignKey("CustomerKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.LocationModel", b =>
                {
                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.LocationModel", "ParentLocation")
                        .WithMany("ChildLocations")
                        .HasForeignKey("ParentLocationKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.TagContentModel", b =>
                {
                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.TagsModel", "ChildTag")
                        .WithMany()
                        .HasForeignKey("ChildTagKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.IndicatorModel", "Indicator")
                        .WithMany("TagContents")
                        .HasForeignKey("IndicatorKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.ItemModel", "Item")
                        .WithMany("TagContents")
                        .HasForeignKey("ItemKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.LocationModel", "Location")
                        .WithMany("TagContents")
                        .HasForeignKey("LocationKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.TagsModel", "ParentTag")
                        .WithMany("TagContents")
                        .HasForeignKey("ParentTagKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.UnitModel", "Unit")
                        .WithMany("TagContents")
                        .HasForeignKey("UnitKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ChildTag");

                    b.Navigation("Indicator");

                    b.Navigation("Item");

                    b.Navigation("Location");

                    b.Navigation("ParentTag");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.TagsModel", b =>
                {
                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.LocationModel", "Location")
                        .WithMany("Tags")
                        .HasForeignKey("LocationKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.TagTypeModel", "TagType")
                        .WithMany("Tags")
                        .HasForeignKey("TagTypeKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Location");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.UnitModel", b =>
                {
                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.CustomerModel", "Customer")
                        .WithMany("Units")
                        .HasForeignKey("CustomerKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.ItemModel", "Item")
                        .WithMany("Units")
                        .HasForeignKey("ItemKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TagManagement.Infrastructure.Persistence.Models.LocationModel", "Location")
                        .WithMany("Units")
                        .HasForeignKey("LocationKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Item");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.CustomerModel", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.IndicatorModel", b =>
                {
                    b.Navigation("TagContents");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.ItemModel", b =>
                {
                    b.Navigation("TagContents");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.LocationModel", b =>
                {
                    b.Navigation("ChildLocations");

                    b.Navigation("TagContents");

                    b.Navigation("Tags");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.TagTypeModel", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.TagsModel", b =>
                {
                    b.Navigation("TagContents");
                });

            modelBuilder.Entity("TagManagement.Infrastructure.Persistence.Models.UnitModel", b =>
                {
                    b.Navigation("TagContents");
                });
#pragma warning restore 612, 618
        }
    }
}
